/*
 * Copyright (c) 2020 De Staat der Nederlanden, Ministerie van Volksgezondheid, Welzijn en Sport.
 *  Licensed under the EUROPEAN UNION PUBLIC LICENCE v. 1.2
 *
 *  SPDX-License-Identifier: EUPL-1.2
 */
package nl.rijksoverheid.ctr.api

import nl.rijksoverheid.ctr.api.signing.certificates.EV_ROOT_CA
import nl.rijksoverheid.ctr.signing.SignatureValidationException
import nl.rijksoverheid.ctr.signing.SignatureValidator
import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.bouncycastle.util.encoders.Base64
import org.junit.Assert.assertEquals
import org.junit.Assert.assertThrows
import org.junit.Test
import java.io.ByteArrayInputStream
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate

private val TEST_SIGNATURE = Base64.decode(
    "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",
)

private val TEST_PAYLOAD = "TEST CONTENT".toByteArray()

class SignatureValidatorTest {

    @Test
    fun `signature validator validates signature with correct signing certificate`() {
//        val provider = BouncyCastleProvider()
//        val rootCertificate = CertificateFactory.getInstance("X509", provider)
//            .generateCertificate(SignatureValidator::class.java.getResourceAsStream("/signingcert.crt")) as X509Certificate
//
//        val validator = SignatureValidator.Builder()
//            // self-signed
//            .addTrustedCertificate(rootCertificate)
//            .signingCertificate(rootCertificate)
//            .build()
//
//        validator.verifySignature(
//            ByteArrayInputStream(TEST_PAYLOAD),
//            TEST_SIGNATURE
//        )
    }

    @Test
    fun `signature validator rejects signature with wrong signing certificate`() {
        val provider = BouncyCastleProvider()
        // wrong certificate for signing
        val signingCertificate = CertificateFactory.getInstance("X509", provider)
            .generateCertificate(SignatureValidator::class.java.getResourceAsStream("/ca-pki-overheid.pem")) as X509Certificate

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(EV_ROOT_CA)
            .signingCertificate(signingCertificate)
            .build()

        val exception = assertThrows(SignatureValidationException::class.java) {
            validator.verifySignature(
                ByteArrayInputStream(TEST_PAYLOAD),
                TEST_SIGNATURE
            )
        }

        assertEquals("The cert path cannot be validated", exception.message)
    }

    @Test
    fun `signature validator validates correct PKI-O signature`() {
        // defaults for Staat der Nederlanden trust anchor and authority key id
        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(EV_ROOT_CA)
            .build()

        validator.verifySignature(
            ByteArrayInputStream(Base64.decode("eyJyZXN1bHQiOnsidW5pcXVlIjoiN2I3MGI2NTE4OGU4ZmQ3Mjg3YTc0OTY3Mjk0MGQyNGY2N2I5ZmVlMiIsInNhbXBsZURhdGUiOiIyMDIxLTAxLTE4VDIyOjI4OjMzKzAwOjAwIiwidGVzdFR5cGUiOiI3NzVjYWEyMTQ5IiwibmVnYXRpdmVSZXN1bHQiOmZhbHNlfSwicHJvdG9jb2xWZXJzaW9uIjoiMS4wIiwicHJvdmlkZXJJZGVudGlmaWVyIjoiQlJCIiwic3RhdHVzIjoiY29tcGxldGUifQ==")),
            Base64.decode(
                ""
            )
        )
    }

    @Test
    fun `validates with certificate with RND coronatester nl`() {
        //SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=.coronatester.nl
        val cert = """-----BEGIN CERTIFICATE-----
MIIDhzCCAm+gAwIBAgIJAM2WaDmIAyrnMA0GCSqGSIb3DQEBCwUAMFoxKzApBgNV
BAMMIlN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoM
FVN0YWF0IGRlciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwHhcNMjEwNzE0MDg1
MzA0WhcNMjEwODEzMDg1MzA0WjBaMSswKQYDVQQDDCJTdGFhdCBkZXIgTmVkZXJs
YW5kZW4gUm9vdCBDQSAtIEczMR4wHAYDVQQKDBVTdGFhdCBkZXIgTmVkZXJsYW5k
ZW4xCzAJBgNVBAYTAk5MMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
pgxJTobvN/4Ej+kt7TtIXeCf0RMk8MhuEwkCteqSwuxSIYKUwPZKASxrys3LQLhQ
AiaIPlxduWFeVytP3MUkhhnUGgJqr/BueSSMmvC2J7KkSZVovlVYw6EYZNybkd42
F4n5IfnEQtefJhh1Y01jX22UwlbKe8E3VR+9fiiLYy+tIipZYebCoNkqzT2mBdBk
MxXU/K74yS65m4oFL/8nDuGtcajIzxNjIWL1xU/4wMITgoe51cxBraLwxrE2ff6K
pMJdu5r4PAmxKPGp+v8YZuqnfG+RR1O8CqJAzkwqx7IDT0Nq/B8e7R7xiX5KyWVp
leYLpvI/P9+EGexci1J7HQIDAQABo1AwTjAdBgNVHQ4EFgQUYH0l6u3dWF2T22MW
ve4VSXRi1lYwHwYDVR0jBBgwFoAUYH0l6u3dWF2T22MWve4VSXRi1lYwDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAlCTr4O/tX+5JQD+q/W6DA0vDjSze
RaJqrfi4xlkTTQzDb76PP9GjHJ8hA1qNmKX/K1l4QBJhNjKTj4Piz8vYr539kanB
rQGV1xGB4Znl+YK8vE7oyelPOTkeAiduPGFVfp58z69uYY+vJ9aHQpj0uq0PELeB
bPtLgFso/pE8Uu57NH4LhngUGmyZI5epLKI6H/M38ll9JgIg+nL0O1jtXLaJpDnz
smRx6Pbf73XsL5KmLMshilVBGiZr+QKReDvZq8xLq66LJOFw7t8GOpRqdAYPC4mG
LhA3gg89xrq8bA3XlMOXEpHzX29xu1ODoCZ+GNqlqK/UrWb3TdFGtwI+/Q==
-----END CERTIFICATE-----"""
        val payload = "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature = "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        validator.verifySignature(
            ByteArrayInputStream(Base64.decode(payload)),
            Base64.decode(
                signature
            )
        )
    }

    @Test
    fun `given a cert with coronatester example nl RDN, then it fails`() {
        // SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=.coronatester.example.nl
        val cert = """-----BEGIN CERTIFICATE-----
MIIDhzCCAm+gAwIBAgIJAI1YA6raUcSGMA0GCSqGSIb3DQEBCwUAMFoxKzApBgNV
BAMMIlN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoM
FVN0YWF0IGRlciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwHhcNMjEwNzE0MDkw
NzI0WhcNMjEwODEzMDkwNzI0WjBaMSswKQYDVQQDDCJTdGFhdCBkZXIgTmVkZXJs
YW5kZW4gUm9vdCBDQSAtIEczMR4wHAYDVQQKDBVTdGFhdCBkZXIgTmVkZXJsYW5k
ZW4xCzAJBgNVBAYTAk5MMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
tFTauGCaVvspW0ZJPAbthZK70BwN9CSFACKUYLrVOl8fDYPQyLdhz7+KhQdM8119
wop48MHWC2gy68zhatLqOgFR5UQHtpZ4eCGilkx+vq5hVHH5HWbWjPubAB+rsehK
kfzpFFeSSsCD49AzghV6ZDmbx7TcW98meRm81hRCrhXHMEJ6dPfOs88jEsu1tGTK
as2xW7xcjqwvPw/DRvD09anWS/yIr96VOokAzlsDyv3ILiKVU4iAbART44X2jcqo
lFwwMSxGUkC3QRZHBeAaOybIbHQNBPNZZPKaFWyeZSP6yzbFgxkw7lxXJSr4h5C4
4rzSrE1G26WlxB20NM8mnwIDAQABo1AwTjAdBgNVHQ4EFgQUtLiIfha9mq+y8sjx
Yqa2Jdp5aLUwHwYDVR0jBBgwFoAUtLiIfha9mq+y8sjxYqa2Jdp5aLUwDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAYWh5F6BfpTgeczjoutmwyyW6aDNc
y3p8ENW83R3or2xTrXwEDAfiGN3DjDmA75OS37/ZjPOgUUjyfUE2sjYiwG8ZK20P
Zxf9KAOcbJC2Po6pux2G9iD7xM4M6//muDMyzV6D4DycbAENSyBSdl8Hk6LepRpR
hMlccZ2nkBJksyq92AT3j5ZthOkqe0iIRAuiN7MEzk4ihjjdBkOo2gyGmR+plPwU
0vSIOcNod5Q7hAYPeSsU6Fgo7x07QCkQdiNl6V/0XvGC/WJqMf1InP7v10O9d03g
LfYRLCpd6VRMjl6qfUNFgjJoaMaDKNifN7FzSj8WPqImI/oc77OYHHhbnA==
-----END CERTIFICATE-----"""
        val payload = "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature = "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        val exception = assertThrows(SignatureValidationException::class.java) {
            validator.verifySignature(
                ByteArrayInputStream(Base64.decode(payload)),
                Base64.decode(
                    signature
                )
            )
        }

        assertEquals("Signing certificate does not match expected CN", exception.message)
    }


    @Test
    fun `given a cert with www coronatester nl example com RND then it fails`() {
        //SubjectDN: C=NL,O=Ministerie van Volksgezondheid\, Welzijn en Sport,OU=Corona Alerters,CN=www.coronatester.nl.example.com
        val cert = """-----BEGIN CERTIFICATE-----
MIIDhzCCAm+gAwIBAgIJAIISPeanlbU7MA0GCSqGSIb3DQEBCwUAMFoxKzApBgNV
BAMMIlN0YWF0IGRlciBOZWRlcmxhbmRlbiBSb290IENBIC0gRzMxHjAcBgNVBAoM
FVN0YWF0IGRlciBOZWRlcmxhbmRlbjELMAkGA1UEBhMCTkwwHhcNMjEwNzE0MDkx
ODQyWhcNMjEwODEzMDkxODQyWjBaMSswKQYDVQQDDCJTdGFhdCBkZXIgTmVkZXJs
YW5kZW4gUm9vdCBDQSAtIEczMR4wHAYDVQQKDBVTdGFhdCBkZXIgTmVkZXJsYW5k
ZW4xCzAJBgNVBAYTAk5MMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
vblaciS3/Lcprup4xKQGntwzN9u8oPDG0kVjojRzP73apdj61wQarAmAJ7PoFs2w
5Sm3JHeyWgCATCslcfwGIF+Ue9VmATFSCLzyJ+KxNoPAEVsgXcddHxhNENdbWd7p
hJelDLX1DY5n7ZKhbgZ1dW22cEFHZyOGpCl0K9hQ1+/toH2ROQpOU/Iw4z53vCxJ
ICauFGfE4WlYf1085oIy8KUhIXCOtO/XXgqONfNVtikMImgM6jctv914+sfNNXWQ
uasRbeMdhkHf6eeUGCz0peQLtcK8izTFq+rEs1t0XmByAgZRd67nXpCij2raNryV
w/Xg1+Nnt4nkjU5VqZUvmQIDAQABo1AwTjAdBgNVHQ4EFgQUI/NTBjZ4TLzOTnn8
8XBRvcF5NlswHwYDVR0jBBgwFoAUI/NTBjZ4TLzOTnn88XBRvcF5NlswDAYDVR0T
BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAIv4/owf/OzPIU8ePFbRTcRZuP+qU
RlefJuhasczYPjrVKTNCQzZJOwZF0S+sgna4PhJpswhO5FfeaIImz7atTUvyuWWt
lfd5UsbFXdrZFfVnlpwVH2prOwTxOEkPrg7+Gt0ME24upcgj5m6g50Nw1K50IkIw
QLQPWLbN8aoRb6eRuzvMKRZfzL6T3emzznen6PSWoGVxegGze4kRyw+Y8nIiLNnn
uDRhsGTSjArLNA81gAW7LLvEwcF8+6j1iKAMmEfmDlid+yelY1Nprco9hjYa6Vy8
hbf/EJ1LWtpVIlMqjxAVibjP5CyzEC30L9HqTtpSeQpX+TsndA4+HeA0DQ==
-----END CERTIFICATE-----"""
        val payload = "WwogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMDYtMTdUMTA6MDA6MDAuMDAwKzAyMDAiLAogICJ1aXRzbGFnZGF0dW0iOiIyMDIwLTA2LTE3VDEwOjEwOjAwLjAwMCswMjAwIiwKICAicmVzdWx0YWF0IjoiTkVHQVRJRUYiLAogICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAiYWZzcHJhYWtJZCI6Mjc4NzE3Njh9LAogeyJhZm5hbWVkYXR1bSI6IjIwMjAtMTEtMDhUMTA6MTU6MDAuMDAwKzAxMDAiLAogICAidWl0c2xhZ2RhdHVtIjoiMjAyMC0xMS0wOVQwNzo1MDozOS4wMDArMDEwMCIsCiAgICJyZXN1bHRhYXQiOiJQT1NJVElFRiIsCiAgICJhZnNwcmFha1N0YXR1cyI6IkFGR0VST05EIiwKICAgImFmc3ByYWFrSWQiOjI1ODcxOTcyMTl9Cl0K"
        val signature = "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"

        val url = ".coronatester.nl"

        val validator = SignatureValidator.Builder()
            .addTrustedCertificate(cert)
            .cnMatching(url)
            .build()

        val signatureValidationException = assertThrows(
            SignatureValidationException::class.java
        ) {
            validator.verifySignature(
                ByteArrayInputStream(Base64.decode(payload)),
                Base64.decode(
                    signature
                )
            )
        }

        assertEquals("Signing certificate does not match expected CN", signatureValidationException.message)
    }
}
